---
// Component.astro
import { tv, type VariantProps } from 'tailwind-variants';
import { cn } from '@src/lib/utils';

// Style definitions using Tailwind Variants
export const componentVariants = tv({
  base: 'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors',
  variants: {
    variant: {
      default: 'bg-primary text-primary-foreground hover:bg-primary/90',
      secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
      destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
      outline: 'border-input bg-background hover:bg-accent hover:text-accent-foreground border',
      ghost:
        'hover:bg-accent text-muted-foreground hover:text-accent-foreground hover:text-foreground [&.selected]:text-foreground [&.selected]:bg-accent',
    },
    size: {
      default: 'h-10 px-4 py-2',
      sm: 'h-9 rounded-md px-3',
      lg: 'h-11 rounded-md px-8',
      icon: 'h-8 w-8',
    },
  },
  defaultVariants: {
    variant: 'default',
    size: 'default',
  },
});

export type ComponentVariant = VariantProps<typeof componentVariants>['variant'];
export type ComponentSize = VariantProps<typeof componentVariants>['size'];

// Component props type definition
export interface ComponentProps {
  variant?: ComponentVariant;
  size?: ComponentSize;
  href?: string;
  /**
   * Specifies the type of element to render using the 'as' property.
   * If not specified, <a> or <button> is chosen based on the presence of href.
   */
  as?: string;
  /// Class name and other HTML attributes
  class?: string;
  [key: string]: any;
}

const {
  variant = 'default',
  size = 'default',
  href,
  as,
  class: className,
  ...restProps
} = Astro.props as ComponentProps;

// If ‘as’ is not specified, choose  or  based on the presence of href
const tag = as || (href ? 'a' : 'button');

// Merge Tailwind Variants with provided classes
const finalClassName = cn(componentVariants({ variant, size }), className);
---

<div class={finalClassName} {...restProps}>
  <slot />
</div>
