---
// Component.astro
import { tv, type VariantProps } from 'tailwind-variants';
import { cn } from '@src/lib/utils';

// Style definitions using Tailwind Variants
export const componentVariants = tv({
  base: 'inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors',
  variants: {
    variant: {
      default: 'text-foreground',
      primary: 'bg-primary text-primary-foreground hover:bg-primary/90',
      secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
      destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
      outline: 'border-input text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground border',
      border: 'border-primary text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground border',
      ghost:
        'hover:bg-accent text-muted-foreground hover:text-accent-foreground hover:text-foreground [&.selected]:text-foreground [&.selected]:bg-accent',
      select:
        'text-muted-foreground hover:bg-accent hover:text-accent-foreground [&.selected]:text-primary-foreground [&.selected]:bg-primary',
      dropdown: 'border border-mute text-foreground hover:bg-muted-foreground/60 focus:outline-hidden shadow-xs',
      none: '',
    },
    size: {
      default: 'h-10 px-4 rounded-lg py-2',
      lg: 'h-11 rounded-lg px-8',
      sm: 'h-9 rounded-lg px-3',
      xs: 'h-8 rounded-lg px-3',
      icon: 'h-8 w-8',
      cta: 'h-11 rounded-full text-md px-8 my-2',
      submit: 'h-10 w-95 rounded-md font-medium text-md py-2',
      tab: 'rounded-2xl px-3 py-1',
      none: '',
    },
  },
  defaultVariants: {
    variant: 'default',
    size: 'default',
  },
});

export type ButtonVariant = VariantProps<typeof componentVariants>['variant'];
export type ButtonSize = VariantProps<typeof componentVariants>['size'];

// Component props type definition
export interface TemplateProps {
  variant?: ButtonVariant;
  size?: ButtonSize;
  href?: string;
  /**
   * as プロパティによりレンダリングする要素タイプを指定できます。
   * 未指定の場合、href の有無により <a> または <button> を選択します。
   */
  // as?: "a" | "button" | "div" | string;
  // class 名およびその他の HTML 属性
  class?: string;
  [key: string]: any;
}

const {
  variant = 'default',
  size = 'default',
  href,
  // as,
  class: className,
  ...restProps
} = Astro.props as TemplateProps;

// If ‘as’ is not specified, choose  or  based on the presence of href
// const tag = as || (href ? "a" : "button");

// Merge Tailwind Variants with provided classes
const finalClassName = cn(componentVariants({ variant, size }), className);
---

{
  href ? (
    <a class={finalClassName} href={href} {...restProps}>
      <slot />
    </a>
  ) : (
    <button class={finalClassName} type="button" {...restProps}>
      <slot />
    </button>
  )
}
