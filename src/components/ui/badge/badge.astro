---
// Component.astro
import { tv, type VariantProps } from 'tailwind-variants';
import { cn } from '@src/lib/utils';

// Style definitions using Tailwind Variants
export const badgeVariants = tv({
  base: 'focus:ring-ring inline-flex select-none items-center rounded-full border transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2',
  variants: {
    variant: {
      default: 'bg-primary text-primary-foreground hover:bg-primary/80 border-transparent',
      secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80 border-transparent',
      destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/80 border-transparent',
      outline: 'text-foreground',
      ghost:
        'text-muted-foreground hover:bg-accent hover:text-accent-foreground hover:text-foreground [&.selected]:text-foreground [&.selected]:bg-accent',
    },
    size: {
      default: 'font-semibold px-2.5 py-0.5 text-xs',
      sm: '',
      lg: '',
    },
  },
  defaultVariants: {
    variant: 'default',
    size: 'default',
  },
});

export type BadgeVariant = VariantProps<typeof badgeVariants>['variant'];
export type BadgeSize = VariantProps<typeof badgeVariants>['size'];
export type CardTitleTag = 'a' | 'span';

// Component props type definition
export interface BadgeProps {
  variant?: BadgeVariant;
  size?: BadgeSize;
  href?: string;
  as?: CardTitleTag;
  class?: string;
  [key: string]: any;
}

const { variant = 'default', size = 'default', href, as, class: className, ...restProps } = Astro.props as BadgeProps;

// If ‘as’ is not specified, choose  or  based on the presence of href
const Tag = as || (href ? 'a' : 'span');

// Merge Tailwind Variants with provided classes
const finalClassName = cn(badgeVariants({ variant, size }), className);
---

<Tag class={finalClassName} {...restProps}>
  <slot />
</Tag>
