---
// Component.astro
import { tv, type VariantProps } from 'tailwind-variants';
import { cn } from '@src/lib/utils';

// Style definitions using Tailwind Variants
export const inputVariants = tv({
  base: 'border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex rounded-md border file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50',
  variants: {
    variant: {
      default: '',
      outline: 'border-input bg-background hover:bg-accent hover:text-accent-foreground border',
    },
    size: {
      default: 'h-10 w-full px-3 py-2 text-sm ',
      sm: 'h-9 rounded-md px-3',
      lg: 'h-11 rounded-md px-8',
      icon: 'h-8 w-8',
      search: 'rounded-full text-sm outline-hidden w-full px-4 py-2 pl-10 pr-10',
    },
  },
  defaultVariants: {
    variant: 'default',
    size: 'default',
  },
});

export type InputVariant = VariantProps<typeof inputVariants>['variant'];
export type InputSize = VariantProps<typeof inputVariants>['size'];

// Component props type definition
export interface InputProps {
  variant?: InputVariant;
  size?: InputSize;
  href?: string;
  class?: string;
  value?: string;
  readonly?: boolean;
  [key: string]: any;
}

const {
  variant = 'default',
  size = 'default',
  href,
  class: className,
  value,
  readonly = false,
  ...restProps
} = Astro.props as InputProps;

// Merge Tailwind Variants with provided classes
const finalClassName = cn(inputVariants({ variant, size }), className);
---

<input class={finalClassName} {...restProps} {readonly} {value} />
