---
// Component.astro
import { tv, type VariantProps } from 'tailwind-variants';
import { cn } from '@src/lib/utils';

// Style definitions using Tailwind Variants
export const componentVariants = tv({
  base: '',
  variants: {
    variant: {
      default: 'text-foreground',
      primary: 'text-primary-foreground',
      secondary: 'text-secondary-foreground',
      destructive: 'text-destructive-foreground',
      link: 'text-primary underline-offset-4 hover:text-muted-foreground',
      outline: 'border-input',
      muted: 'text-muted-foreground',
      none: '',
    },
    size: {
      default: 'text-sm mb-2',
      hero_headline: 'text-[min(6vw,70px)] font-bold whitespace-nowrap mb-6 mx-2',
      hero_subheadline: 'text-[min(3.5vw,30px)] font-semibold text-pretty max-w-[85%] lg:max-w-4xl mb-5',
      headline: 'text-[min(6vw,50px)] font-bold text-pretty mb-5',
      sub_headline: 'text-[min(4vw,22.5px)] max-w-3xl mx-auto text-center mb-4',
      lead_in_text: 'text-xl font-semibold mb-3',
      description: 'text-[min(3.5vw,18px)] mb-3',
      Price: 'text-[30px] mb-5',
      lg: 'text-lg font-semibold mb-3',
      md: 'text-[min(5vw,17px)] font-semibold mb-3',
      xs: 'text-xs mb-2',
      none: '',
      icon: 'h-8 w-8',
    },
  },
  defaultVariants: {
    variant: 'default',
    size: 'default',
  },
});

export type TextVariant = VariantProps<typeof componentVariants>['variant'];
export type TextSize = VariantProps<typeof componentVariants>['size'];

// Component props type definition
export interface TextProps {
  variant?: TextVariant;
  size?: TextSize;
  href?: string;
  as?: string;
  class?: string;
  [key: string]: any;
}

const { variant = 'default', size = 'default', href, as, class: className, ...restProps } = Astro.props as TextProps;

// Merge Tailwind Variants with provided classes
const finalClassName = cn(componentVariants({ variant, size }), className);

const Tag = as || (href ? 'a' : size === 'hero_headline' ? 'h1' : size === 'headline' ? 'h2' : 'p');

const props = {
  class: finalClassName,
  ...(href ? { href } : {}),
  ...restProps,
};
---

<Tag {...props}><slot /></Tag>
