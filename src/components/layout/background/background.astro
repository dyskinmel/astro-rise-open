---
// Component.astro
import { tv, type VariantProps } from 'tailwind-variants';
import { cn } from '@src/lib/utils';

// Style definitions using Tailwind Variants
export const componentVariants = tv({
  base: '',
  variants: {
    variant: {
      default: 'bg-background',
      none: '',
    },
  },
  defaultVariants: {
    variant: 'default',
  },
});

export const patternVariants = tv({
  base: '',
  variants: {
    pattern: {
      default: '',
      dot: 'inset-0 -z-50 bg-fixed h-full w-full bg-[radial-gradient(#4f4f4f2e_1px,transparent_1px)] dark:bg-[radial-gradient(#ffffff14_1px,transparent_1px)] bg-[size:16px_16px]',
      line: 'inset-0 -z-50 bg-fixed h-full w-full bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:14px_24px]',
      none: '',
    },
  },
  defaultVariants: {
    pattern: 'default',
  },
});

export const effectVariants = tv({
  base: '',
  variants: {
    effect: {
      default: '',
      effect1:
        'inset-0 -z-40 bg-fixed h-full w-full [background-image:radial-gradient(ellipse_50%_35%_at_50%_0%,#fff_70%,transparent_200%)] dark:[background-image:radial-gradient(ellipse_25%_25%_at_50%_-20%,#3e3e3e_70%,transparent_200%)]  pointer-events-none',
      effect2:
        'inset-0 -z-40 bg-fixed h-full w-full bg-[radial-gradient(ellipse_80%_80%_at_50%_0%,rgba(120,119,198,0.3),rgba(255,255,255,0))] dark:bg-[radial-gradient(ellipse_80%_80%_at_50%_120%,rgba(120,119,198,0.3),rgba(255,255,255,0))] pointer-events-none',
      none: '',
    },
  },
  defaultVariants: {
    effect: 'default',
  },
});

export type BackgroundVariant = VariantProps<typeof componentVariants>['variant'];
export type BackgroundPattern = VariantProps<typeof patternVariants>['pattern'];
export type BackgroundEffect = VariantProps<typeof effectVariants>['effect'];

// Component props type definition
export interface BackgroundProps {
  variant?: BackgroundVariant;
  pattern?: BackgroundPattern;
  effect?: BackgroundEffect;
  class?: string;
  [key: string]: any;
}

const {
  variant = 'default',
  pattern = 'default',
  effect = 'default',
  class: className,
  ...restProps
} = Astro.props as BackgroundProps;

// Merge Tailwind Variants with provided classes
const variantClassName = cn(componentVariants({ variant }), className);
const patternClassName = cn(patternVariants({ pattern }));
const effectClassName = cn(effectVariants({ effect }));
---

<div class={variantClassName} {...restProps}>
  <div class={patternClassName}>
    <div class={effectClassName}>
      <slot />
    </div>
  </div>
</div>
