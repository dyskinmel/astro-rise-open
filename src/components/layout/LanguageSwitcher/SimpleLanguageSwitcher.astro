---
import { Button } from '@src/components/ui/button/index.astro';
import { LANG_LIST, LANGUAGES, DEFAULT_LANG } from '@src/i18n/utils';

const currentLocale = (Astro.params.lang || DEFAULT_LANG) as keyof typeof LANGUAGES;

// Generate a list excluding the current language
const localeLinks = LANG_LIST.filter((locale) => locale !== currentLocale) //  Exclude the currently selected language
  .map((locale) => ({
    locale,
    label: LANGUAGES[locale].label, // Eliminate hard-coded values and retrieve from LANGUAGES
    href: `/${locale}${Astro.url.pathname.replace(new RegExp('^/(' + LANG_LIST.join('|') + ')'), '')}`, //  Replace the language part
  }));
---

<div class="relative inline-block text-left bg-background/0 language-switcher">
  <Button variant="dropdown" class="dropdown-button w-full min-w-30 rounded-md">
    {LANGUAGES[currentLocale].label}
    <svg
      class="-mr-1 ml-2 h-5 w-5"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true"
    >
      <path
        fill-rule="evenodd"
        d="M5.293 9.293a1 1 0 011.414 0L10 12.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
        clip-rule="evenodd"></path>
    </svg>
  </Button>
  <ul
    class="dropdown-menu absolute right-0 z-10 w-full origin-top-right md:mt-2 mt-0 md:top-full top-auto md:bottom-auto bottom-full md:mb-0 mb-2 rounded-md shadow-lg"
    style="display: none"
  >
    {
      localeLinks.map((link) => (
        <li data-key={link.locale}>
          <Button href={link.href} variant="dropdown" class="w-full min-w-30 rounded-md bg-background/90">
            {link.label}
          </Button>
        </li>
      ))
    }
  </ul>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Retrieve all LanguageSwitcher components
    const switchers = document.querySelectorAll('.language-switcher');

    switchers.forEach((switcher) => {
      // Retrieve the button and menu elements and cast them to HTML element types
      const dropdownButton = switcher.querySelector('.dropdown-button') as HTMLButtonElement | null;
      const dropdownMenu = switcher.querySelector('.dropdown-menu') as HTMLUListElement | null;

      // Skip if elements do not exist
      if (!dropdownButton || !dropdownMenu) {
        console.error('Dropdown elements not found for a switcher.');
        return;
      }

      // Align the dropdown menu width with the button
      dropdownMenu.style.width = `${dropdownButton.offsetWidth}px`;

      dropdownButton.addEventListener('click', () => {
        const isVisible = dropdownMenu.style.display === 'block';
        dropdownMenu.style.display = isVisible ? 'none' : 'block';
      });

      document.addEventListener('click', (event) => {
        if (
          !(event.target instanceof Node) ||
          (!dropdownButton.contains(event.target) && !dropdownMenu.contains(event.target))
        ) {
          dropdownMenu.style.display = 'none';
        }
      });
    });
  });
</script>
