---
// NavbarLayout.astro
import { tv, type VariantProps } from 'tailwind-variants';
import { cn } from '@src/lib/utils';

// Style definitions using Tailwind Variants
export const navbarLayoutVariants = tv({
  base: 'z-50',
  variants: {
    variant: {
      default: 'relative',
      fixed: 'fixed bottom-0 md:bottom-auto md:top-0 left-0 right-0 bg-background/10 backdrop-blur-lg px-4 py-2.5',
    },
    layout: {
      default: 'flex items-center justify-between',
    },
  },
  defaultVariants: {
    variant: 'default',
    layout: 'default',
  },
});

export type NavbarLayoutVariant = VariantProps<typeof navbarLayoutVariants>['variant'];
export type NavbarLayoutLayout = VariantProps<typeof navbarLayoutVariants>['layout'];

// Component props type definition
export interface NavbarLayoutProps {
  variant?: NavbarLayoutVariant;
  layout?: NavbarLayoutLayout;
  href?: string;
  /**
   * Specifies the type of element to render using the 'as' property.
   * If not specified, <a> or <button> is chosen based on the presence of href.
   */
  as?: string;
  // Class name and other HTML attributes
  class?: string;
  [key: string]: any;
}

const {
  variant = 'default',
  layout = 'default',
  href,
  as,
  class: className,
  ...restProps
} = Astro.props as NavbarLayoutProps;

// Merge Tailwind Variants with provided classes
const finalClassName = cn(navbarLayoutVariants({ variant, layout }), className);
---

<nav class={finalClassName} {...restProps}>
  <slot />
</nav>
